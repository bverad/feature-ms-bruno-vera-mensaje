name: Pipeline to devops foundation course
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]

jobs:

  build:
    runs-on : ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Java 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with maven
        run: mvn -B package --file pom.xml

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-reports
          path: target/site/jacoco/

  analize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Download JaCoCo coverage report
        uses: actions/download-artifact@v2
        with:
          name: jacoco-reports         

      

  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=
            -Dsonar.organization=


  deploy:
    runs-on: ubuntu-latest
    name: build and deploy in minikube
    steps:
    - uses: actions/checkout@v2
    - name: Start minikube
      uses: medyagh/setup-minikube@master
    - name: Try the cluster !
      run: kubectl get pods -A
    - name: Build image
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker build -f ./Dockerfile -t local/example .
        echo -n "verifying images:"
        docker images        
    - name: Deploy to minikube
      run:
        kubectl apply -f deploy-to-minikube.yaml
    - name: Test service URLs
      run: |
        minikube service list
        minikube service example --url
        echo "------------------opening the service------------------"
        curl $(minikube service example --url)    

  test:
      runs-on: ubuntu-latest
      name: Execute JMeter test
      steps:
        - name: Create reports directory
          run: mkdir reports
    
        - name: Executing Test
          uses: QAInsights/PerfAction@v5.6.2
          with:
            test-plan-path: ./TestPlans/S01_SimpleExample/S01_SimpleExample.jmx
            args: "-e -o ./reports/html/"
        
        - name: Upload Results
          uses: actions/upload-artifact@v3
          with:
            name: jmeter-results
            path: result.jtl
            if-no-files-found: error
    
        - name: Upload HTML Reports
          uses: actions/upload-artifact@v3
          with:
            name: jmeter-html-reports
            path: reports
            if-no-files-found: error

  
